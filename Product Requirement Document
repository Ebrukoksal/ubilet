1. Projenin Amacı ve Genel Yapı
Proje Amacı
Terminal (CLI) üzerinden etkileşimli bir seyahat planlayıcı uygulamasının oluşturulması planlanmaktadır.
Uçak, otobüs, tren biletleri ile otel rezervasyonu ve araç kiralama işlemlerinin tek bir yapıda sunulması hedeflenmektedir..
Genel Kapsam
Uygulamada herhangi bir grafik arayüze (frontend) yer verilmeyecektir; bütün işlemlerin komut satırından yapılması öngörülmektedir.
Uçak biletinde, ad, soyad, T.C. kimlik numarası ve cep telefonu bilgilerinin girilmesinin zorunlu tutulması istenmektedir.
Versiyon 1 için bilet alım ve kiralama kısımlarında (otobüs, tren, otel, araç kiralama) basit placeholder veri veya JSON dosyaları kullanılabilmektedir.
Ayrıca, kullanıcı girişi sistemi ve admin paneli eklenerek rol tabanlı özelliklerin uygulanması istenmektedir.
Kullanılacak Araçlar
Python 3.9+ sürümünün tercih edilmesi önerilmektedir.
Git ile sürüm kontrolü yapılabilmelidir.
Kod düzenlemesi için VSCode ve Cursor kullanılacaktır.

2. Proje Dizini ve Dosya Yapısı
Aşağıdaki örnek klasör yapısı kullanılması önerilmektedir:

seyahat_planlayici/
│
├── main.py               # Uygulamayı çalıştıran ana dosya
├── modules/
│   ├── auth.py           # Kullanıcı girişi ve rol yönetimi
│   ├── admin.py          # Admin paneli işlemleri (veri ekleme/çıkarma/güncelleme)
│   ├── flight.py         # Uçak bileti işlemleri
│   ├── bus.py            # Otobüs bileti işlemleri
│   ├── train.py          # Tren bileti işlemleri
│   ├── hotel.py          # Otel rezervasyonu işlemleri
│   ├── car.py            # Araç kiralama işlemleri
│   └── payment.py        # Ödeme simülasyonu
├── data/
│   ├── flights.json      # Placeholder uçuş verileri
│   ├── buses.json        # Placeholder otobüs verileri
│   ├── trains.json       # Placeholder tren verileri
│   ├── hotels.json       # Placeholder otel verileri
│   └── cars.json         # Placeholder araç verileri
└── README.md

auth.py dosyasında kullanıcı girişi, kayıt ve rol yönetimi gibi işlemlerin tanımlanması önerilmektedir.
admin.py dosyasında admin paneli üzerinden veritabanı/JSON dosyalarına ekleme, silme ve güncelleme fonksiyonlarının bulunması tavsiye edilmektedir.


3. Kullanıcı Girişi (auth.py)
Kullanıcı Kaydı ve Rol Yönetimi
Bir kullanıcı kaydı (ör. kullanıcı adı, şifre, rol) tanımlanması düşünülmektedir.
Kullanıcıların “admin” veya “normal” (basic user) rollerinden birine sahip olması istenmektedir.
Giriş (Login) Akışı
Uygulama başlatıldığında, kullanıcının kullanıcı adı ve şifresi alınarak doğrulama yapılması planlanmaktadır.
Doğrulama sonucunda “admin” rolüne sahip olanlara admin paneline giriş imkânı sunulması önerilmektedir.
Rolü “basic user” olanların ise normal menüye (bilet alma, rezervasyon vb.) yönlendirilmeleri beklenmektedir.
Basit Veri Saklama
Kullanıcı bilgilerinin JSON dosyasında veya Python listesinde (ör. users.json) saklanması mümkündür.
Şifrelerin basit bir hash fonksiyonuyla (ör. hashlib) saklanması önerilmektedir.
Örnek Kod Parçası:

# auth.py
import json
import hashlib


def login():
    username = input("Kullanıcı Adı: ")
    password = input("Şifre: ")


    # Kullanıcıların saklandığı bir JSON dosyası ya da sözlük varsayılabilir
    with open("data/users.json", "r", encoding="utf-8") as f:
        users = json.load(f)


    hashed_input = hashlib.sha256(password.encode()).hexdigest()


    for user in users:
        if user["username"] == username and user["password"] == hashed_input:
            print("Giriş başarılı!")
            return user["role"]  # "admin" veya "user"


    print("Kullanıcı adı veya şifre hatalı!")
    return None


4. Admin Paneli (admin.py)
Admin Paneli Ana Menüsü
Admin rolüne sahip kullanıcıların, admin paneli menüsüne yönlendirilmesi öngörülmektedir.
Aşağıdaki alt menü seçeneklerinin sunulması planlanmaktadır:
swift
KopyalaDüzenle
1 - Uçuş Ekle/Çıkar/Güncelle
2 - Otobüs Seferi Ekle/Çıkar/Güncelle
3 - Tren Seferi Ekle/Çıkar/Güncelle
4 - Otel Ekle/Çıkar/Güncelle
5 - Araç Ekle/Çıkar/Güncelle
6 - Çıkış Admin Paneli


Veri Ekleme/Çıkarma/Güncelleme
Belirli bir JSON dosyası (ör. flights.json) içindeki verilerin açılması, kullanıcıdan alınan bilgilere göre yeni bir uçuş kaydı eklenmesi veya mevcut bir kaydın silinmesi/güncellenmesi önerilmektedir.
Aynı mantıkla otobüs, tren, otel ve araç JSON dosyalarında da ekleme, çıkarma ve güncelleme işlemleri gerçekleştirilecektir.
Kaydetme ve Çıkma
Değişiklikler yapıldıktan sonra dosyanın tekrar yazılması (örn. json.dump(...)) gerekmektedir.
Admin panelinden çıkıldığında, ana menüye veya kullanıcı giriş ekranına dönülmesi beklenmektedir.
Örnek Kod Parçası:

# admin.py


import json


def admin_panel():
    while True:
        print("\n=== Admin Paneli ===")
        print("1 - Uçuş Düzenle")
        print("2 - Otobüs Seferi Düzenle")
        print("3 - Tren Seferi Düzenle")
        print("4 - Otel Düzenle")
        print("5 - Araç Düzenle")
        print("6 - Çıkış Admin Paneli")


        choice = input("Seçiminiz: ")
        if choice == "1":
            edit_flights()
        elif choice == "2":
            edit_buses()
        elif choice == "3":
            edit_trains()
        elif choice == "4":
            edit_hotels()
        elif choice == "5":
            edit_cars()
        elif choice == "6":
            print("Admin panelinden çıkılıyor.")
            break
        else:
            print("Geçersiz seçim!")


def edit_flights():
    # flights.json açılıp ekleme, silme ve güncelleme menüsü gösterilebilir
    with open("data/flights.json", "r", encoding="utf-8") as f:
        flights = json.load(f)


    print("1 - Ekle | 2 - Sil | 3 - Güncelle | 4 - Geri")
    choice = input("Seçiminiz: ")
    
    if choice == "1":
        airline = input("Havayolu: ")
        departure = input("Kalkış: ")
        arrival = input("Varış: ")
        time_ = input("Saat: ")
        price = input("Fiyat: ")
        new_flight = {
            "airline": airline,
            "departure": departure,
            "arrival": arrival,
            "time": time_,
            "price": int(price)
        }
        flights.append(new_flight)
        print("Yeni uçuş eklendi.")
    elif choice == "2":
        # Silme işlemi için mevcut uçuşların listelenmesi ve index istenmesi sağlanabilir
        pass
    elif choice == "3":
        # Güncelleme işlemi için benzer şekilde bir seçim yapılabilir
        pass
    
    with open("data/flights.json", "w", encoding="utf-8") as f:
        json.dump(flights, f, ensure_ascii=False, indent=2)
    print("Değişiklikler kaydedildi.")


def edit_buses():
    pass  # Benzer mantıkla uygulanabilir


def edit_trains():
    pass  # Benzer mantıkla uygulanabilir


def edit_hotels():
    pass


def edit_cars():
    pass

5. Ana Menünün ve Uygulama Akışının Güncellenmesi (main.py)
Kullanıcı Girişi
Uygulama başlatıldığında auth.py içindeki login() fonksiyonunun çağrılması önerilmektedir.
Girişte gelen rol bilgisi “admin” ise admin paneline, “user” ise normal menüye yönlendirme yapılması planlanmaktadır.
Normal Kullanıcı Menüsü
Uçak bileti, otobüs bileti, tren bileti, otel rezervasyonu ve araç kiralama işlemlerinin listelenmesi öngörülmektedir.
Kullanıcı “exit” (veya “6”) dediğinde uygulamadan çıkılmaktadır.
Admin Rolü Menüsü
Admin paneline otomatik girilmesi veya ana menüden “Admin Paneli” seçeneği sunulması düşünülebilir.
Admin paneli kapatıldığında, gerekirse yeniden giriş ekranına dönülebilir veya uygulama sona erdirilebilir.
Örnek Akış:
# main.py

from modules.auth import login
from modules.admin import admin_panel
from modules import flight, bus, train, hotel, car

def main():
    role = login()
    if role == "admin":
        # Admin paneline yönlendir
        admin_panel()
    elif role == "user":
        # Normal kullanıcı menüsüne yönlendir
        user_menu()
    else:
        print("Giriş yapılamadı, program sonlandırılıyor.")

def user_menu():
    while True:
        print("\n=== Ana Menü (Kullanıcı) ===")
        print("1 - Uçak Bileti")
        print("2 - Otobüs Bileti")
        print("3 - Tren Bileti")
        print("4 - Otel Rezervasyonu")
        print("5 - Araç Kiralama")
        print("6 - Çıkış")

        choice = input("Seçim: ")
        if choice == "1":
            flight.flight_operations()
        elif choice == "2":
            bus.bus_operations()
        elif choice == "3":
            train.train_operations()
        elif choice == "4":
            hotel.hotel_operations()
        elif choice == "5":
            car.car_operations()
        elif choice == "6":
            print("Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim!")

if __name__ == "__main__":
    main()

6. Uçak Bileti Modülü (flight.py)
Zorunlu Bilgilerin Toplanması
Kalkış şehri, varış şehri, tarih (gg.aa.yyyy), yolcu sayısı, ad, soyad, T.C. kimlik numarası ve cep telefonu bilgilerinin sorgulanması gerekmektedir.
Placeholder Verilerinin Kullanılması (Opsiyonel)
flights.json veya Python sözlüğü/listesi üzerinden uçuşların aranması tavsiye edilmektedir.
Uygun seferler listelenerek seçime sunulacaktır.

Ödeme veya Rezervasyon Onayı
Sefer seçildikten sonra ödeme simülasyonuna geçilmesi istenmekte; işlem tamamlandıktan sonra bilet oluşturulduğuna dair bir mesaj gösterilmesi önerilmektedir.
Örnek Kod Parçası (Basit Bir Uygulama Akışı):
# flight.py

def flight_operations():
    print("Uçak Bileti İşlemleri")
    departure_city = input("Kalkış Şehri: ")
    arrival_city = input("Varış Şehri: ")
    travel_date = input("Tarih (gg.aa.yyyy): ")
    passenger_count = input("Yolcu Sayısı: ")

    # Zorunlu kişisel bilgiler
    first_name = input("Ad: ")
    last_name = input("Soyad: ")
    tc_number = input("T.C. Kimlik No: ")
    phone_number = input("Cep Telefonu: ")

    # Burada placeholder verilerle arama yapılabilir (örn. flights.json)
    flights = search_flights(departure_city, arrival_city, travel_date)

    if not flights:
        print("Uygun sefer bulunamadı.")
        return

    # Sefer seçimi
    for idx, f in enumerate(flights, start=1):
        print(f"{idx} - {f['airline']} | Saat: {f['time']} | Fiyat: {f['price']}")

    selection = int(input("Sefer Seçimi: "))
    chosen_flight = flights[selection - 1]

    confirm = input("Ödeme adımına geçilsin mi? (E/H): ")
    if confirm.lower() == 'e':
        from modules.payment import payment_simulation
        payment_simulation(chosen_flight, first_name, last_name, tc_number, phone_number)
    else:
        print("İşlem iptal edildi.")

def search_flights(departure_city, arrival_city, date_str):
    # flights.json veya benzer bir yapı içinden filtrelenebilir
    # Şimdilik basit örnek
    sample_flights = [
        {"airline": "THY", "departure": "İstanbul", "arrival": "Ankara", "time": "09:00", "price": 500},
        {"airline": "Pegasus", "departure": "İstanbul", "arrival": "İzmir",   "time": "10:30", "price": 450},
    ]
    filtered = [f for f in sample_flights 
                if f["departure"] == departure_city 
                and f["arrival"] == arrival_city]
    return filtered


7. Otobüs Bileti Modülü (bus.py)
Bilgilerin Toplanması
Kalkış, varış, tarih, (isteğe bağlı) koltuk seçimi gibi bilgilerin alınması önerilmektedir.
Sefer Arama ve Seçim
buses.json veya Python listesi kullanılarak seferlerin listelenmesi, kullanıcıya seçim sunulması planlanmaktadır.
Ödeme Simülasyonu
Sefer seçildikten sonra payment.py üzerinden sahte ödeme akışına geçilmesi ve başarı durumunda biletin oluşturulduğuna dair mesaj verilmesi tercih edilmektedir.


    8. Tren Bileti Modülü (train.py)
Bu kısımda da placeholder verisi kullanılacağı belirtilmektedir:
Tren Sefer Verilerinin Tanımlanması
trains.json içinde veya Python listesinde tren seferleri (kalkış istasyonu, varış istasyonu, saat, fiyat vb.) saklanmaktadır.
Kod içinde, bu verilerin okunarak filtrelenmesi planlanmaktadır.
Bilgilerin Toplanması
Kalkış ve varış istasyonları, tarih veya sefer saati gibi bilgilerin kullanıcıdan alınması önerilmektedir.
Farklı vagon/koltuk seçenekleri eklenmek istenirse placeholder dosyasında bu detayların da bulunması tavsiye edilmektedir.
Filtreleme ve Sefer Seçimi
Eşleşen seferlerin listelenmesi ve kullanıcıdan gelen seçim doğrultusunda işlenmesi öngörülmektedir.
Sonrasında ödeme simülasyonu başlatılarak tren bileti oluşturulduğuna dair mesaj üretilmektedir.
Örnek Kod Parçası:
# train.py

import json

def train_operations():
    print("Tren Bileti İşlemleri")
    departure_station = input("Kalkış İstasyonu: ")
    arrival_station = input("Varış İstasyonu: ")
    travel_date = input("Tarih (gg.aa.yyyy): ")

    # Placeholder veriler (trains.json) okunabilir
    with open("data/trains.json", "r", encoding="utf-8") as f:
        all_trains = json.load(f)

    matching_schedules = [t for t in all_trains 
                          if t["departure"] == departure_station 
                          and t["arrival"] == arrival_station]

    if not matching_schedules:
        print("Uygun tren seferi bulunamadı.")
        return

    for idx, schedule in enumerate(matching_schedules, start=1):
        print(f"{idx} - {schedule['departure']} > {schedule['arrival']} | Saat: {schedule['time']} | Fiyat: {schedule['price']}")

    selection = int(input("Sefer Seçimi: "))
    chosen = matching_schedules[selection - 1]

    confirm = input("Ödeme adımına geçilsin mi? (E/H): ")
    if confirm.lower() == 'e':
        from modules.payment import payment_simulation
        # Rastgele kullanıcı bilgileri atanabilir veya sorulabilir
        payment_simulation(chosen, "TrenAd", "TrenSoyad", "22222222222", "5556667788")
    else:
        print("Tren bileti işlemi iptal edildi.")


     

9. Otel Rezervasyonu Modülü (hotel.py)
Konaklama Detaylarının Toplanması
Şehir, giriş-çıkış tarihleri, kişi sayısı gibi bilgilerin istenmesi önerilmektedir.
Otel Listesinin Sunulması
hotels.json veya bir Python listesi aracılığıyla şehir ve tarihe göre filtreleme yapılması planlanmaktadır.
Ödeme Simülasyonu
Rezervasyon onaylanınca payment.py aracılığıyla sahte bir ödeme akışı yürütülmesi ve başarılı görülürse rezervasyon kodunun gösterilmesi öngörülmektedir.

10. Araç Kiralama Modülü (car.py)
Teslim Alma ve Bırakma Bilgilerinin Alınması
Araç teslim alma yeri/tarihi ve bırakma yeri/tarihi gibi verilerin kullanıcıdan alınması planlanmaktadır.
Araç Seçeneklerinin Listelenmesi
cars.json veya Python listesi üzerinden araçların (ekonomik, orta, lüks vb.) filtrelenmesi önerilmektedir.
Ehliyet ve Yaş Bilgisi
İhtiyaç duyulması halinde kullanıcının ehliyet yılı, yaş gibi bilgilere göre kısıtlar uygulanması mümkün görülmektedir.
Rezervasyon ve Ödeme
Seçilen araç için ödeme simülasyonu yapılarak rezervasyonun tamamlanması beklenmektedir.

11. Ödeme Simülasyonu (payment.py)
Sahte Ödeme Fonksiyonunun Kullanılması
Kart numarası, son kullanma tarihi ve CVV bilgileri sorgulanarak gerçek bir işlem yapılmadan basit bir doğrulama yapılması planlanmaktadır.
Başarı ve Hata Durumları
Yetersiz veya geçersiz kart bilgisi durumunda “Ödeme başarısız” sonucu üretilmesi istenmektedir.
Uygun görülürse bilet veya rezervasyon kodunun oluşturulduğu ve terminalde gösterildiği bir “başarılı” sonucu verilmektedir.
Örnek Kod Parçası:
# payment.py

def payment_simulation(selected_item, first_name, last_name, tc, phone):
    print("Ödeme simülasyonuna geçiliyor...")
    card_number = input("Kart Numarası (sahte girilebilir): ")
    expiry = input("Son Kullanma Tarihi (AA/YY): ")
    cvv = input("CVV: ")

    if len(card_number) < 8:
        print("Ödeme başarısız! Kart numarası çok kısa.")
        return

    print("Ödeme başarılı kabul edildi.")
    print(f"{first_name} adlı kullanıcı için rezervasyon/bilet işlemi tamamlandı.")
    import random
    code = f"RES-{random.randint(1000,9999)}"
    print(f"Rezervasyon/Bilet Kodu: {code}")



12. Test Senaryoları ve Hata Yönetimi
Farklı Girdilerin Denenmesi
Hatalı şehir, tarih, sefer seçimi vb. durumlarda anlaşılır uyarıların gösterilmesi istenmektedir.
Tren bileti kısmında kod içine eklenmeyen bir istasyon ismi girildiğinde “Sefer bulunamadı” şeklinde uyarı verilmesi beklenmektedir.
Menü Döngüsü Kontrolleri
Kullanıcının tekrar tekrar farklı işlemlere yönlenmesi ve çıkış yapabilmesi denenerek akışın sorunsuz çalıştığından emin olunması önerilmektedir.
Ödeme Prosedürleri
Kısa veya geçersiz kart numarası girildiğinde “Ödeme başarısız” uyarısı, geçerli görülürse “Başarılı” mesajı verilmesi istenmektedir.

13. Proje Tamamlama ve Geliştirme
README.md Dosyası
Kurulum adımlarının ve nasıl çalıştırılacağının bu dosyada özetlenmesi tavsiye edilmektedir.
Kısa bir modül/fonksiyon açıklaması da eklenebilir.
Sürüm Kontrolü
Geliştirme sürecinde Git gibi bir araçla versiyon takibi yapılması önerilmektedir.
Her modülün eklenmesi veya güncellenmesi sırasında uygun açıklama ile commit atılması beklenmektedir.
İleride Planlanan Geliştirmeler
Veritabanı (SQLite, PostgreSQL vb.) entegrasyonunun sağlanması ve canlı verilerle çalışılması mümkündür.
API’ler üzerinden gerçek havayolu, otel veya otobüs verilerinin çekilmesiyle projenin gerçek sisteme yakınlaştırılması önerilmektedir.
Çoklu dil desteği, kullanıcı kayıt sistemi (e-posta, şifre vb.) gibi ek özellikler ilerleyen aşamalarda değerlendirmeye alınabilir.

14. Özet ve Sonuç
Ana menü üzerinden uçak, otobüs, tren, otel ve araç kiralama işlemlerinin yönetilmesi hedeflenmektedir.
Uçak, tren, otobüs biletinde, ad, soyad, T.C. kimlik numarası ve cep telefonu bilgilerinin zorunlu tutulması istenmektedir.
Ödeme simülasyonu aracılığıyla tüm rezervasyon işlemlerine basit bir tamamlanma veya hata mesajı eklenmesi planlanmaktadır.
Test senaryolarında olası hatalı girdi veya menü seçimleriyle uygulamanın nasıl davrandığı gözlemlenerek güvenilirlik artırılabilecektir.

