# Interactive Travel Planner (CLI)

This document provides an overview of a command-line (CLI) travel planner application that manages plane, bus, train tickets, hotel reservations, and car rentals.

---

## Table of Contents
1. [Project Purpose and General Structure](#project-purpose-and-general-structure)
2. [Project Directory and File Structure](#project-directory-and-file-structure)
3. [User Login (auth.py)](#user-login-authpy)
4. [Admin Panel (admin.py)](#admin-panel-adminpy)
5. [Main Menu and Application Flow (mainpy)](#main-menu-and-application-flow-mainpy)
6. [Plane Ticket Module (flight.py)](#plane-ticket-module-flightpy)
7. [Bus Ticket Module (bus.py)](#bus-ticket-module-buspy)
8. [Train Ticket Module (train.py)](#train-ticket-module-trainpy)
9. [Hotel Reservation Module (hotel.py)](#hotel-reservation-module-hotelpy)
10. [Car Rental Module (car.py)](#car-rental-module-carpy)
11. [Payment Simulation (payment.py)](#payment-simulation-paymentpy)
12. [Test Scenarios and Error Handling](#test-scenarios-and-error-handling)
13. [Project Completion and Development](#project-completion-and-development)
14. [Summary and Conclusion](#summary-and-conclusion)

---

## Project Purpose and General Structure

**Project Purpose**  
- Create an interactive travel planner that runs in the terminal (CLI).  
- Provide flight, bus, train tickets, hotel reservations, and car rentals in a single system.

**General Scope**  
- **CLI-Only Interface:** No frontend or GUI is used.  
- **Mandatory Fields for Plane Tickets:** First name, last name, Turkish Republic ID number, and mobile phone number.  
- **Placeholder Data (Version 1):** JSON files for all ticket purchase and rental sections (bus, train, hotel, car rental).  
- **User Roles:** Includes a user login system and admin panel for role-based features.

**Tools to be Used**  
- **Python 3.9+** for the core application.  
- **Git** for version control.  
- **VSCode/Cursor** for editing.

---

## Project Directory and File Structure

Recommended folder structure:


- **auth.py:** Handles user login and role management.  
- **admin.py:** Manages the admin panel for data editing.  
- **flight.py, bus.py, train.py, hotel.py, car.py:** Modules for booking and operations.  
- **payment.py:** Simulates the payment process.  
- **data/ folder:** Stores placeholder JSON data.

---

## User Login (auth.py)

- **User Registration & Role Management:** Users can have “admin” or “basic” roles.  
- **Login Flow:** Prompts for username and password; verifies credentials from JSON storage.  
- **Password Hashing:** Uses hashlib to store passwords securely.

---

## Admin Panel (admin.py)

- **Admin Panel Menu:** Allows creation, removal, and updating of flights, buses, trains, hotels, and cars in JSON files.  
- **File-Based Data Editing:** JSON files are opened and updated (e.g., flights.json).  
- **Exiting:** Returns to the main menu or login screen upon completion.

---

## Main Menu and Application Flow (main.py)

- **Login Check:** Determines if a user is admin or basic.  
- **Admin Flow:** Redirects to the admin panel for data editing.  
- **User Flow:** Presents a normal menu with booking options.  
- **Exit:** Typing “exit” or selecting option “6” closes the application.

---

## Plane Ticket Module (flight.py)

- **Mandatory Fields:** Departure/arrival city, date, number of passengers, personal details.  
- **Placeholder Data:** Filters and lists flights from flights.json or a similar structure.  
- **Payment Confirmation:** Once a flight is chosen, proceeds to payment simulation.

---

## Bus Ticket Module (bus.py)

- **Collecting Info:** Departure, arrival, date, optional seat selection.  
- **Placeholder Data:** Lists bus schedules from buses.json.  
- **Payment Simulation:** Completes booking with a simulated payment.

---

## Train Ticket Module (train.py)

- **Train Schedules:** Stored in trains.json.  
- **Search & Filter:** Matches departure and arrival stations, date, time.  
- **Booking & Payment:** Finalizes the train ticket after a payment simulation.

---

## Hotel Reservation Module (hotel.py)

- **Accommodation Details:** City, check-in/out, number of guests.  
- **Filtering Hotels:** Based on city and date, from hotels.json.  
- **Payment:** Confirms reservation with a simulated payment and issues a reservation code.

---

## Car Rental Module (car.py)

- **Rental Details:** Pickup/drop-off location and dates.  
- **Car Selection:** Economy, mid, luxury options filtered from cars.json.  
- **Payment & Confirmation:** Completes the car rental reservation if the payment simulation succeeds.

---

## Payment Simulation (payment.py)

- **Fake Payment Function:** Asks for card details (card number, expiry date, CVV).  
- **Validation:** Checks minimum length of card number to determine success/failure.  
- **Result:** Displays success or failure message and provides a reservation code upon success.

---

## Test Scenarios and Error Handling

- **Invalid Inputs:** Shows warnings for unrecognized city names, schedules, or short card numbers.  
- **Menu Loop:** Ensures repeated use of options, with proper handling of exit conditions.  
- **Payment:** Displays “Payment failed” if validations fail, “successful” otherwise.

---

## Project Completion and Development

- **README.md File:** Summarizes installation steps and usage.  
- **Version Control:** Recommends using Git with frequent commits.  
- **Future Enhancements:** May include a switch to databases, API-based data, multilingual support, etc.

---

## Summary and Conclusion

By focusing on CLI-based operations, mandatory user details for key ticket types, JSON-based data storage, and simple payment simulations, this project aims to deliver a complete travel planning experience in a terminal environment. It can be further expanded with database integration, real-time data, or additional functionalities for a more robust and modern travel booking system.
